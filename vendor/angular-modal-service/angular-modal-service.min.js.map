{"version":3,"sources":["angular-modal-service.js"],"names":["module","angular","factory","$document","$compile","$controller","$http","$rootScope","$q","$templateCache","ModalService","self","this","getTemplate","template","templateUrl","deferred","defer","resolve","cachedTemplate","get","undefined","method","url","cache","then","result","put","data","error","reject","promise","showModal","options","controllerName","controller","controllerAs","modalScope","$new","closeDeferred","inputs","$scope","close","delay","window","setTimeout","$destroy","modalElement","remove","modal","inputName","modalElementTemplate","element","linkFn","$element","modalController","appendElement","append","body","scope","find"],"mappings":"CAMC,WAEC,YAEA,IAAIA,GAASC,QAAQD,OAAO,yBAE5BA,GAAOE,QAAQ,gBAAiB,YAAa,WAAY,cAAe,QAAS,aAAc,KAAM,iBACnG,SAASC,EAAWC,EAAUC,EAAaC,EAAOC,EAAYC,EAAIC,GAKlE,QAASC,KAEP,GAAIC,GAAOC,KAKPC,EAAc,SAASC,EAAUC,GACnC,GAAIC,GAAWR,EAAGS,OAClB,IAAGH,EACDE,EAASE,QAAQJ,OACZ,IAAGC,EAAa,CAErB,GAAII,GAAiBV,EAAeW,IAAIL,EAClBM,UAAnBF,EACDH,EAASE,QAAQC,GAIjBb,GAAOgB,OAAQ,MAAOC,IAAKR,EAAaS,OAAO,IAC5CC,KAAK,SAASC,GAEbjB,EAAekB,IAAIZ,EAAaW,EAAOE,MACvCZ,EAASE,QAAQQ,EAAOE,QAJ5BtB,SAMS,SAASuB,GACdb,EAASc,OAAOD,SAItBb,GAASc,OAAO,iDAElB,OAAOd,GAASe,QAGlBpB,GAAKqB,UAAY,SAASC,GAGxB,GAAIjB,GAAWR,EAAGS,QAGdiB,EAAiBD,EAAQE,UAC7B,OAAID,IAODD,EAAQG,eACTF,EAAiBA,EAAiB,OAASD,EAAQG,cAIrDvB,EAAYoB,EAAQnB,SAAUmB,EAAQlB,aACnCU,KAAK,SAASX,GAGb,GAAIuB,GAAa9B,EAAW+B,OAQxBC,EAAgB/B,EAAGS,QACnBuB,GACFC,OAAQJ,EACRK,MAAO,SAAShB,EAAQiB,IACTtB,SAAVsB,GAAiC,OAAVA,KAAgBA,EAAQ,GAClDC,OAAOC,WAAW,WAEhBN,EAAcrB,QAAQQ,GAGtBW,EAAWS,WACXC,EAAaC,SAKbR,EAAOE,MAAQ,KACf1B,EAAW,KACXuB,EAAgB,KAChBU,EAAQ,KACRT,EAAS,KACTO,EAAe,KACfV,EAAa,MACZM,IAKP,IAAGV,EAAQO,OACT,IAAI,GAAIU,KAAajB,GAAQO,OAC3BA,EAAOU,GAAajB,EAAQO,OAAOU,EAKvC,IAAIC,GAAuBlD,QAAQmD,QAAQtC,GAIvCuC,EAASjD,EAAS+C,GAClBJ,EAAeM,EAAOhB,EAC1BG,GAAOc,SAAWP,CAGlB,IAAIQ,GAAkBlD,EAAY6B,EAAgBM,EAG9CP,GAAQuB,cAEVvB,EAAQuB,cAAcC,OAAOV,GAG7BW,EAAKD,OAAOV,EAId,IAAIE,IACFd,WAAYoB,EACZI,MAAOtB,EACPe,QAASL,EACTL,MAAOH,EAAcR,QAIvBf,GAASE,QAAQ+B,KA5ErBpC,SA+ES,SAASgB,GACdb,EAASc,OAAOD,KAGbb,EAASe,UA9Fdf,EAASc,OAAO,qCACTd,EAASe,UA9CtB,GAAI2B,GAAOvD,EAAUyD,KAAK,OAgJ1B,OAAO,IAAIlD","file":"angular-modal-service.min.js","sourcesContent":["//  angularModalService.js\r\n//\r\n//  Service for showing modal dialogs.\r\n\r\n/***** JSLint Config *****/\r\n/*global angular  */\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  var module = angular.module('angularModalService', []);\r\n\r\n  module.factory('ModalService', ['$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateCache',\r\n    function($document, $compile, $controller, $http, $rootScope, $q, $templateCache) {\r\n\r\n    //  Get the body of the document, we'll add the modal to this.\r\n    var body = $document.find('body');\r\n\r\n    function ModalService() {\r\n\r\n      var self = this;\r\n\r\n      //  Returns a promise which gets the template, either\r\n      //  from the template parameter or via a request to the\r\n      //  template url parameter.\r\n      var getTemplate = function(template, templateUrl) {\r\n        var deferred = $q.defer();\r\n        if(template) {\r\n          deferred.resolve(template);\r\n        } else if(templateUrl) {\r\n          // check to see if the template has already been loaded\r\n          var cachedTemplate = $templateCache.get(templateUrl);\r\n          if(cachedTemplate !== undefined) {\r\n            deferred.resolve(cachedTemplate);\r\n          }\r\n          // if not, let's grab the template for the first time\r\n          else {\r\n            $http({method: 'GET', url: templateUrl, cache: true})\r\n              .then(function(result) {\r\n                // save template into the cache and return the template\r\n                $templateCache.put(templateUrl, result.data);\r\n                deferred.resolve(result.data);\r\n              })\r\n              .catch(function(error) {\r\n                deferred.reject(error);\r\n              });\r\n          }\r\n        } else {\r\n          deferred.reject(\"No template or templateUrl has been specified.\");\r\n        }\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.showModal = function(options) {\r\n\r\n        //  Create a deferred we'll resolve when the modal is ready.\r\n        var deferred = $q.defer();\r\n\r\n        //  Validate the input parameters.\r\n        var controllerName = options.controller;\r\n        if(!controllerName) {\r\n          deferred.reject(\"No controller has been specified.\");\r\n          return deferred.promise;\r\n        }\r\n\r\n        //  If a 'controllerAs' option has been provided, we change the controller\r\n        //  name to use 'as' syntax. $controller will automatically handle this.\r\n        if(options.controllerAs) {\r\n          controllerName = controllerName + \" as \" + options.controllerAs;\r\n        }\r\n\r\n        //  Get the actual html of the template.\r\n        getTemplate(options.template, options.templateUrl)\r\n          .then(function(template) {\r\n\r\n            //  Create a new scope for the modal.\r\n            var modalScope = $rootScope.$new();\r\n\r\n            //  Create the inputs object to the controller - this will include\r\n            //  the scope, as well as all inputs provided.\r\n            //  We will also create a deferred that is resolved with a provided\r\n            //  close function. The controller can then call 'close(result)'.\r\n            //  The controller can also provide a delay for closing - this is\r\n            //  helpful if there are closing animations which must finish first.\r\n            var closeDeferred = $q.defer();\r\n            var inputs = {\r\n              $scope: modalScope,\r\n              close: function(result, delay) {\r\n                if(delay === undefined || delay === null) delay = 0;\r\n                window.setTimeout(function() {\r\n                  //  Resolve the 'close' promise.\r\n                  closeDeferred.resolve(result);\r\n\r\n                  //  We can now clean up the scope and remove the element from the DOM.\r\n                  modalScope.$destroy();\r\n                  modalElement.remove();\r\n                  \r\n                  //  Unless we null out all of these objects we seem to suffer\r\n                  //  from memory leaks, if anyone can explain why then I'd \r\n                  //  be very interested to know.\r\n                  inputs.close = null;\r\n                  deferred = null;\r\n                  closeDeferred = null;\r\n                  modal = null;\r\n                  inputs = null;\r\n                  modalElement = null;\r\n                  modalScope = null;\r\n                }, delay);\r\n              }\r\n            };\r\n\r\n            //  If we have provided any inputs, pass them to the controller.\r\n            if(options.inputs) {\r\n              for(var inputName in options.inputs) {\r\n                inputs[inputName] = options.inputs[inputName];\r\n              }\r\n            }\r\n\r\n            //  Parse the modal HTML into a DOM element (in template form).\r\n            var modalElementTemplate = angular.element(template);\r\n\r\n            //  Compile then link the template element, building the actual element.\r\n            //  Set the $element on the inputs so that it can be injected if required.\r\n            var linkFn = $compile(modalElementTemplate);\r\n            var modalElement = linkFn(modalScope);\r\n            inputs.$element = modalElement;\r\n\r\n            //  Create the controller, explicitly specifying the scope to use.\r\n            var modalController = $controller(controllerName, inputs);\r\n\r\n            //  Finally, append the modal to the dom.\r\n            if (options.appendElement) {\r\n              // append to custom append element\r\n              options.appendElement.append(modalElement);\r\n            } else {\r\n              // append to body when no custom append element is specified\r\n              body.append(modalElement);\r\n            }\r\n\r\n            //  We now have a modal object...\r\n            var modal = {\r\n              controller: modalController,\r\n              scope: modalScope,\r\n              element: modalElement,\r\n              close: closeDeferred.promise\r\n            };\r\n\r\n            //  ...which is passed to the caller via the promise.\r\n            deferred.resolve(modal);\r\n\r\n          })\r\n          .catch(function(error) {\r\n            deferred.reject(error);\r\n          });\r\n\r\n        return deferred.promise;\r\n      };\r\n\r\n    }\r\n\r\n    return new ModalService();\r\n  }]);\r\n\r\n}());\r\n"],"sourceRoot":"/source/"}